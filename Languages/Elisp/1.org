#+STARTUP: indent
/学习emacs/
* emacs的启动过程，发生了什么?
** 文件的加载
[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Startup-Summary.html#Startup-Summary][*参考这里]]*
** Major Mode是如何选择的
/[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Choosing-Modes.html#Choosing-Modes][参考这里]]/
*** Major Mode是什么
每一个 ~buffer~ 拥有一个 ~Major Mode~ ，后者决定了 ~buffer~ 的编辑行为。最基本的 ~Major Mdoe~ 是 ~Fundamental mode~ ，此模式不提供特定的设置，所有的命令使用最常规的方式运行，使用默认选项。

~Major Mode~ 一般属于三个组别：
+ 用于普通文本的mode，包括 ~Text mode~ ， ~HRML mode~ 等；
+ 用于编程语言的mode，包括 ~Lisp mode~ ， ~C mode~ 等；
+ 用于特定目的不与文件直接关联的mode，包括 ~Dired mode~ ， ~Message mode~ ， ~shell mode~ 等。

当打开一个文件，或创建一个 ~buffer~ 时，Emacs会自动设置一个 ~Mejor mode~ ，可通过 ~Alt+x xxx-mode~ 手动设置一个mode。每一个 ~buffer~ 都需要一个 ~Major mode~ ，所以只能切换，不能停用 ~Major mode~ 。

~buffer-local~ 变量 ~major-mode~ 的值，为当前 ~Major mode~ 的名称，当切换 ~Major mode~ 时，该变量的值自动设置。Emacs以 ~major-mode~ 的默认值，为未指定 ~Major mode~ 的文件，或新建的 ~buffer~ 指定 ~Major mode~ ，该默认值通常是 ~fundamental-mode~ 。可通过 ~setq-default~ 设置 ~major-mode~ 的默认值。如果 ~major-mode~ 的默认值为 ~nil~ ，则取上一个 ~buffer~ 的当前 ~major-mode~ 。特定的 ~Mejor mode~ 通常会更改某些按键的含义，使其更适合当前模式，或定义一些命令并绑定在 ~C-c+xxx~ 按键上，或者更改一些用户选项和变量。

除了基本模式，所有的 ~Major mode~ 会定义一个模式钩子，即一个定制的lisp函数列表，在 ~buffer~ 启动 ~Major mode~ 后运行。模式钩子的命名是在模式名后加hook，即 ~xxx-mode-hook~ 。在运行模式钩子之前，文本模式将先运行 ~text-mode-hook~ ，程序语言模式将先运行 ~prog-mode-hook~ 。钩子函数能够读取 ~major-mode~ 的值，来查询当前mode。

~Mode hooks~ 通常用来启动 ~Minor mode~ ，即将命令添加到模式钩子里。例如：
#+BEGIN_SRC lisp
(add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
#+END_SRC

*** Minor Mode是什么
~Minor mode~ 是一个可选的编辑模式，用良好定义的方式更改Emacs的行为。不像 ~Major mode~ ，在任意时刻，可以有数个 ~Minor mode~ 发生作用。 ~buffer-local~ 的 ~Minor mode~ ，可以在特定的 ~buffer~ 中启用或关闭，而不影响其它 ~buffer~ ；全局的 ~Minor mode~ 一旦启用，则在在Emacs会话中的所有 ~buffer~ 起作用。大部分 ~Minor mode~ 是默认关闭着的。大部分 ~buffer-local~  ~Minor mode~ 启用后，可在mode状态栏中显示。 ~Minor mode~ 也是和一个mode命令相关联的，其命名通常是 ~modename-mode~ 。

~Minor mode~ 命令不同调用的方式：
+ 如果通过 ~ALT+X~ 或绑定的按键，不带前缀参数直接调用，则会往复切换模式的开启和关闭状态；
+ 如果带前缀参数，那么参数为0或负值，模式无条件关闭，否则无条件开启；
+ 如果通过 ~lisp~ 调用，那么忽略参数或 ~nil~ 参数，使模式无条件开启，其余参数参照上述。这使得可简单地通过 ~Major mode~ 的钩子开启或关闭一个 ~Minor mode~ 。

大部分 ~Minor mode~ 有一个与模式命令相同的变量，其值在模式开启时为 ~non-nil~ ，关闭时为 ~nil~ 。通常不要手动去更改该变量。
*** 如何选择模式
当访问某个文件时，Emacs根据文件名自动选取一个 ~Major mode~ ，比如， ~.c~ 文件选择 ~c mode~ 。有时候根据文件的文本内容选择 ~Major mode~ ，这个特殊的文本内容也用来启动 ~buffer-local~ ~Minor mode~ 。

具体过程：
1. Emacs检查文件时候包含 ~file-local~ 模式变量，如果有 ~file-local~ 变量指定 ~Major mode~ ，Emacs会使用该模式，忽略其其它的选择，有几种方式通过 ~file-local~ 变量指定 ~Major mode~ ，最简单的一种是在文本头行用 ~-*-~ 包围模式名，如 ~-*-Lisp-*-~ 指定了 ~lisp~ 模式，注意使用 ~;~ 将此行注释，或者 ~-*-mode:Lisp-*-~ ，以及 ~-*-mode:Lisp;eval:(auto-fill-mode 1);-*-~ 指定了Major和Minor模式，不过最好使用钩子函数启动 ~Minor mode~ 。
2. 如果没有 ~file-local~ 变量，Emacs检查文本内容中是否有 ~#!~ ，如果有，则表明该文件为可执行的脚本。变量 ~interpreter-mode-alist~ 脚本解释器与 ~Major mode~ 的对应关系。
3. Emacs通过 ~magic-mode-alist~ 来检查文本开始处的内容，这个变量默认是 ~nil~ ，所以，Emacs一般跳过这步。也可以在配置文件里设置这个变量，一般以 ~(regexp . mode-function)~ 的形式 ~regexp~ 是正则表达式， ~mode-function~ 是 ~Major mode~ 命令。如果文件的开头匹配了正则表达式，Emacs选择 ~mmode-function~ 指定的模式。另外也可以将变量设置为 ~(match-function . mode-function)~ 形式。 ~match-function~ 是文件开头调用的lisp函数，如果返回 ~non-nil~ ，则Emacs选择 ~mode-function~ 指定的模式。
4. 如果Emacs依然没找到合适的 ~Major mode~ ，将读取文件的名字，列表 ~auto-mode-alist~ 记录了名字模式与mode的对应关系，元素通常是 ~(regxp . mode-function)~ 或 ~(regxp mode-function flag)~ ，比如 ~("\\.c\\'" . c-mode)~ 若文件名匹配 ~.c~ 则选择 ~c-mode~ ；如果是后一种形式 ~flag~ 不为 ~nil~ ，则调用 ~mode-function~ 后，Emacs丢弃正则表达式后缀，然后搜索列表再进行匹配。对于文件名区分大小写的系统，先执行一次区分大小的搜索，如果不成功，则再执行一次不区分大小写的搜索，要关闭第二次搜索将 ~auto-mode-case-fold~ 设置为 ~nil~ ，对于不区分大小写的系统，只执行一次搜索。
5. 如果还是没找到 ~Major mode~ ，Emacs对 ~buffer~ 开头处的文本和变量 ~magic-fallback-mode-alist~ 作比较，此变量类似 ~magic-mode-alist~ ，区别在于Emacs在访问 ~auto-mode-alist~ 之后查询 ~magic-fallback-mode-alist~ 。默认， ~magic-fallback-mode-akist~ 列表包含 ~image files~ ， ~HTML/XML/SGML files~ ， ~PostScript files~ ， 以及UNIX样式的配置文件。

如果更改了 ~Major mode~ ，可以通过执行 ~M-x normal-mode~ 来返回原来的 ~Major mode~ ，这和通过 ~find-file~ 来被动选择 ~Major mode~ 的过程是一样的。命令 ~C-x C-w~ 和 ~set-visited-file-mode~ 根据文件名来更改到新 ~Major mode~ (如果文件名支持新mode)，如果文件缓存的内容指定了mode，或者一些特定的mode不允许更改，那么上述命令不会生效。可以将变量 ~change-major-mode-with-file-name~ 设置为 ~nil~ 来关闭上述特性。

** Hooks函数如何运行的
/[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Hooks.html#Hooks][参考这里]]/
*** Hooks是什么
- Hook :: 一个变量，能储存现有程序在特定场合调用的函数。
Emacs提供 ~hooks~ 来进行定制，通常 ~hooks~ 在配置文件中设置，但也可以通过lisp函数设置。[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Standard-Hooks.html#Standard-Hooks][一些标准 ~hooks~ ]]。大部分 ~hooks~ 是 ~normal hooks~ 。
- Normal hook :: 一个变量包含一系列函数，函数无参数调用，变量名是以 ~-hook~ 结尾的。
每一个 ~Major mode~ 命令都运行一个称为 ~mode hook~ 的 ~normal hook~ 作为初始化的最后一步。这使得用户能通过覆盖mode分配的 ~buffer-local~ 变量，来定制mode的行为。大多数 ~Minor mode~ 函数最后也运行 ~mode hook~ 。 ~hook~ 也用于其它上下文中，比如， ~suspend-hook~ 在Emacs挂起前运行。

推荐通过使用 ~add-hook~ 将 ~hook function~ 添加进 ~hook~ 变量中， ~hook function~ 可以是任何 ~funcall~ 可接受的参数，大多数 ~hook~ 变量初始时是 ~void~ 。可使用 ~add-hook~ 向全局或 ~buffer-locally~ 的 ~hook~ 添加 ~hook function~ 。
如果变量不是以以 ~-hook~ 结尾，那表明该变量很有可能是 ~abnormal hook~ 。
- Abnormal hook :: ~hook functions~ 带参数调用，或返回值以其它方式使用。
可使用 ~add-hook~ 将一个函数加入 ~abnormal hook~ 中，但必须编写函数以遵守hooks调用约定，通常 ~abnormal hook~ 名字以 ~-functions~ 结尾。如果名字以 ~-function~ 结尾，表明该变量只含有单个函数，此时只能以 ~add-function~ 替代 ~add-hook~ 。
*** Hooks如何设置
如下：
#+BEGIN_SRC
(add-hook 'lisp-interaction-mode-hook 'auto-fill-mode)
#+END_SRC
在 ~lisp interaction mode~ 中自动打开 ~auto fill mode~ 。函数
#+BEGIN_SRC 
add-hook hook function &optional append local
#+END_SRC
将一个  ~function~ 添加到 ~hook~ 中， ~add-hook~ 既可以用于 ~normal hook~ 也可以用于 ~abnormal hook~ 中； ~function~ 可以是能接受适当数量hook参数的lisp函数。如果函数已在hook内，则 ~add-hook~ 不会起作用，如果 ~function~ 有 ~non-nil~ 属性 ~permanent-local-hook~ ，那么 ~kill-all-local-variables~ 或更改 ~Major mode~ ，不会导致函数从hook中删除。
*** 如何利用hook来定制mode
大多数 ~Major mode~ 运行一个或多个 ~mode hooks~ 作为初始化的最后一步。很方便用 ~Mode hooks~ 自定义单个mode的行为，这些hooks总是 ~normal hooks~ 。例如，在 ~text-mode~ 中通过设置hooks开启 ~auto-fill-mode~
#+BEGIN_SRC 
(add-hook 'text-mode-hook 'auto-fill-mode)
#+END_SRC 
这通过启用无参数的命令来启用 ~Minor mode~ 。

** Keys
Emacs的key表示一系列键盘输入，每一个key对应一个命令，例如，当你键入 =f= 时，emacs运行 =self-insert-command= ，这将重复最近敲击的key N次。所有的键盘输入，都有一个关联的绑定键，可以修改和删除。
*** Keymaps
- keymap :: 是一个用于储存key与其关联行为的数据结构。
keymaps几乎不会直接修改，而是为你提供一组命令来控制keymaps。大部分emacs用户通过间接分配key与keymaps交互。

每一个buffer，大部分 =major mode= 和 =minor mode= 都有keymap，并用来定义key的行为。keys 可分为三类： =undefined= ， =prefix key= ， =complete key= ； =undefined= 不做任何操作， =prefix key= 是 =complete key= 的一部分，如 =C-x= ，当调用一个 =complete key= 时，一个命令将执行。 =C-h m= 查看当前buffer激活的 =major mode= 和 =minor mode= 所有绑定的key。
*** 定义key的命令
#+BEGIN_SRC elsp
(define-key KEYMAP KEY DEF)
#+END_SRC
用来更改非当前buffer keymap的键绑定；
#+BEGIN_SRC elsp
(local-set-key KEY COMMAND)
#+END_SRC
更改当前buffer keymap的键绑定；
#+BEGIN_SRC elsp
(global-set-key KEY COMMAND)
#+END_SRC
更改global keymap的键绑定，这将在所有buffers中生效；
#+BEGIN_SRC elisp
(global-unset-key KEY)
#+END_SRC
取消global keymap中的键；
#+BEGIN_SRC elisp
(local-unset-key KEY)
#+END_SRC
取消当前活动的buffer keymap的键。
*** 用代码表示key
使用 =kbd= 宏，它将一个字符串翻译成key，注意 =function key= 和 =navigation key= 需用 =<>= 包围，例如：
#+BEGIN_SRC elisp
  (kbd "C-c p") ;; 表示输入键"C-c p"
  (kbd "<F1>")    ;; 表示输入键"F1"
#+END_SRC
*** 重映射key
 =remap= 可用某个命令来替换某个key指向的命令，例如：
#+BEGIN_SRC elisp
(define-key (current-global-map) [remap kill-line] 'my-homemade-kill-line)
#+END_SRC
用 =my-homemade-killine= 替换了全局keymap下的 =kill-line= 命令，所有指向该命令的key不变。
*** Keymap的查找顺序
Emacs是按一定顺序遍历keymap来查找key的，只有激活的keymap有效，从高到低进行，最先匹配到的key被使用，如下：
- overriding-terminal-local-map :: 用于终端指定的key绑定；
- overriding-local-map :: 用于覆盖所有其它local keymap的key；
- Keymap char property at point :: 用于字符点的keymap，可用于 =yasnippet= 以及自定义框架中等领域；
- emulation-mode-map-alists :: 用于高级的多模式keymap管理；
- minor-mode-overriding-map-alist :: 用于覆盖 =major mode= 中 =minor mode= 使用的keymap；
- minor-mode-map-alist :: 以上述完全相同，主要用于为 =minor mode= 指定keymaps；
- Keymap text property at point :: 与上述字符属性类似，但只适用于文本属性；
- current-local-map :: 用于定义在buffer中当前本地keymap；
- current-global-map :: 用于全局定义的keymap，也即emacs最后查找的keymap。
即， =minor mode= 中的key，比本地key优先，且都优先于全局key。
*** Global与Local
Global key 与 local key 在功能上相同，只不过前者声明在 global keymap 后者声明在 local keymap 中。 Global keymap 是由 =current-global-map= 管理的，即可将 =current-global-map= 传递至函数 =define-key= 中来定义 global keymap中的key；同理， =current-local-map= 用于 local keymap 。但最好的方式还是分别用 =global-set-key= 和 =local-set-key= 来定义相关的key。
通常一个buffer中的 =major mode= 定义了大部分key， =minor mode= 通常添加、删除、更改这些key，同时，这些键都优先 local keymap。
*** 调用命令
Emacs命令是在函数体首部含有 =(interactive...)= 表达式的函数。该语句告诉emacs此命令是交互的，以供用户使用；同时，该语句也决定了，命令是否可由 =M-x= 调用。
所有由key绑定的命令必须含有 =interactive= 语句，同时命令不能含有参数，若需要参数可通过 =lambda= 或一般的 =defun= 包装。

* use-package的使用
** 关键字
** 对:init和:config的理解
* org-mode的基本使用
